name: C++ CI

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:

env:
  SFML_VERSION: 3.0.2
  BUILD_DIR: build
  EXECUTABLE_NAME: picnic

jobs:
  build:
    name: Build and test (${{ matrix.os }} ${{ matrix.compiler }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        compiler: [gcc, clang]
        exclude:
          - os: windows-latest
            compiler: clang
          - os: macos-latest
            compiler: gcc

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install CMake
        uses: lukka/get-cmake@v4

      - name: Setup dependencies
        run: |
          if [ "${{ runner.os }}" = "Linux" ]; then
            sudo apt-get update
            sudo apt-get install -y libx11-dev libxrandr-dev libudev-dev libgl1-mesa-dev valgrind
          elif [ "${{ runner.os }}" = "macOS" ]; then
            brew install sfml
          fi

      - name: Create minimal dictionary
        run: |
          echo "ana\nmare\ncare\nram\nnor" > big_romanian_list.txt

      - name: Configure CMake
        run: cmake -S . -B $BUILD_DIR -DCMAKE_BUILD_TYPE=Release

      - name: Build project
        run: cmake --build $BUILD_DIR --config Release -- -j2

      - name: Verify executable
        run: |
          echo "Listing build directory:"
          ls $BUILD_DIR || dir $BUILD_DIR
          if [ -f $BUILD_DIR/${EXECUTABLE_NAME} ] || [ -f $BUILD_DIR/${EXECUTABLE_NAME}.exe ]; then
            echo " Executabil gasit: ${EXECUTABLE_NAME}"
          else
            echo "Eroare: Executabilul lipseste!"
            exit 1
          fi

      - name: Run executable safely
        run: |
          if [ -f $BUILD_DIR/${EXECUTABLE_NAME} ]; then
            ./$BUILD_DIR/${EXECUTABLE_NAME} || true
          elif [ -f $BUILD_DIR/${EXECUTABLE_NAME}.exe ]; then
            ./$BUILD_DIR/${EXECUTABLE_NAME}.exe || true
          else
            echo "⚠️ Skip run."
          fi

      - name: Run Cppcheck
        run: cppcheck --enable=all --suppress=missingIncludeSystem . || true

      - name: Run Clang-Tidy
        run: clang-tidy --version || true

      - name: Run Valgrind (Ubuntu only)
        if: runner.os == 'Linux'
        run: |
          if [ -f $BUILD_DIR/${EXECUTABLE_NAME} ]; then
            valgrind --leak-check=full ./$BUILD_DIR/${EXECUTABLE_NAME} || true
          fi

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}
          path: build/
