name: C++ CI

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:

jobs:
  build:
    name: Build and test on multiple systems
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        compiler: [gcc, clang]
        exclude:
          - os: windows-latest
            compiler: clang
          - os: macos-latest
            compiler: gcc

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install CMake
        uses: lukka/get-cmake@v4

      - name: Create minimal word list
        run: |
          echo "ana\nmare\ncare\nram\nnor" > big_romanian_list.txt

      - name: Configure CMake
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

      - name: Build
        run: cmake --build build --config ${{ matrix.build_type }} -- -j2

      - name: Check executable
        run: |
          echo "Listing build directory:"
          ls build || dir build
          if [ -f build/picnic ] || [ -f build/picnic.exe ] || [ -f build/PicnicCuvant ] || [ -f build/PicnicCuvant.exe ]; then
            echo " Executabilul există."
          else
            echo " Eroare: Executabilul lipsește!"
            exit 1
          fi

      - name: Run executable safely
        run: |
          if [ -f build/picnic ]; then
            ./build/picnic || true
          elif [ -f build/PicnicCuvant ]; then
            ./build/PicnicCuvant || true
          else
            echo " Executabilul nu a fost găsit. Skip run."
          fi

      - name: Run Cppcheck
        run: |
          cppcheck --enable=all --suppress=missingIncludeSystem . || true

      - name: Run Clang-Tidy
        run: |
          clang-tidy --version || echo "clang-tidy not available on this runner"

      - name: Run Valgrind (Ubuntu only)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update && sudo apt-get install -y valgrind
          if [ -f build/picnic ]; then
            valgrind --leak-check=full ./build/picnic || true
          elif [ -f build/PicnicCuvant ]; then
            valgrind --leak-check=full ./build/PicnicCuvant || true
          else
            echo " Valgrind skip: executabil lipsă."
          fi

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}
          path: build/
